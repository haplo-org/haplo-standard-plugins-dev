std:plugin:resources("tablesort.js")

template:dashboard:common:dashboard-page() {

  each(dashboard.$displays.above-export) { render(.) }

  template:dashboard:common:export-form() {

    each(dashboard.$displays.above-navigation) { render(.) }
  
    template:dashboard:common:navigation()
  
    each(dashboard.$displays.above) { render(.) }
  
    if(widgetsTop) {
      <div class="z__std_reporting_list_widgets_top">
        each(widgetsTop) { render(.) }
      </div>
    }
    if(widgetsBottom) {
      <div class="z__std_reporting_list_widgets_bottom">
        each(widgetsBottom) { render(.) }
      </div>
    }
  }

  each(dashboard.$displays.above-table) { render(.) }

  <table id="z__std_reporting_list_filterable_table" class=[
        "tablesort"
        // TODO: Work out how to lay out tables with grouping headers a bit better
        unless(groupHeaderRows){"z__std_reporting_dashboard_table_no_wrapping"}
  ]>
    <thead>
      <tr>
        each(groupHeaderRows) {
          <tr>
            each(.) {
              <th colspan=colspan class="z__std_reporting_list_group_header_cell"> title </th>
            }
          </tr>
        }
        each(columns) {
          <th class=switch(columnStyle) {}
                      wide   { "z__std_reporting_list_column_wide" }
                      medium { "z__std_reporting_list_column_medium" }
                      small  { "z__std_reporting_list_column_small" }
                      tiny   { "z__std_reporting_list_column_tiny" } >
            heading
          </th>
        }
      </tr>
    </thead>
    <tbody>
      each(rowsHTML) {
        <tr *attributes> unsafeHTML(unsafeRowHTML) </tr>
      }
    </tbody>
  </table>

}
